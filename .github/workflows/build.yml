# https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions
name: Build

on:
  push:
    branches:
    - '**'
    tags-ignore:
    - '**'
    paths-ignore:
    - '**/*.adoc'
    - '**/*.md'
    - '.github/*.yml'
  pull_request:
  workflow_dispatch:
    # https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: 
          - ubuntu-latest
          - macos-latest
          - windows-latest
        haxe:
          #- 4.2.1 TODO https://github.com/haxetink/tink_testrunner/issues/19
          - 4.1.5
          - 4.0.5

    steps:
    - name: Show environment variables
      shell: bash
      run: env | sort

    - name: Git Checkout
      uses: actions/checkout@v2 #https://github.com/actions/checkout

    - name: "Cache: Haxelib Repository"
      uses: actions/cache@v2
      with:
        path: $RUNNER_TOOL_CACHE/haxe/${{ matrix.haxe }}/x64/lib
        key: ${{ runner.os }}-haxelib-${{ hashFiles('**/haxelib.json') }}
        restore-keys: |
          ${{ runner.os }}-haxelib-

    - name: Upgrade brew
      if: runner.os == 'macOS'
      env:
        # https://docs.brew.sh/Manpage#environment
        HOMEBREW_NO_ANALYTICS: 1
        HOMEBREW_NO_INSTALL_CLEANUP: 1
      run: |
        echo "::group::brew update" && brew update && echo "::endgroup::"
        echo "::group::brew config" && brew config && echo "::endgroup::"

        # workaround to prevent "/usr/local/... is not inside a keg" during "brew install mono"
        rm /usr/local/bin/2to3
        rm /usr/local/share/man/man1/*
        rm /usr/local/share/man/man5/*

    - name: Set up Python 3
      uses: actions/setup-python@v2 # https://github.com/actions/setup-python
      with:
        python-version: 3.9

    - name: Configure Python 3 on Windows
      if: runner.os == 'Windows'
      shell: cmd
      # workaround for https://github.com/actions/setup-python/issues/123
      run:
        if not exist "%pythonLocation%\python.exe" (
          mklink "%pythonLocation%\python3.exe" "%pythonLocation%\python.exe"
        )

    - name: Install Haxe ${{ matrix.haxe }}
      uses: krdlab/setup-haxe@v1 # https://github.com/krdlab/setup-haxe
      with:
        haxe-version: ${{ matrix.haxe }}

    - name: Install haxe libs
      shell: bash
      run: |
        haxelib config

        for lib in hx3compat hscript munit utest tink_testrunner; do # travix
          echo "::group::install_$lib"
          haxelib --always install  $lib
          echo "::endgroup::"
        done

        haxelib git travix https://github.com/back2dos/travix
        pushd . 
        cd $(haxelib config)travix/git
        haxe build-neko.hxml -lib hx3compat
        popd

        haxelib dev haxe-doctest .


    ##################################################
    # Tests
    ##################################################

    - name: Test [cpp]
      run: haxelib run travix cpp

    - name: Test [cs]
      run: haxelib run travix cs

    - name: Test [eval]
      run: haxelib run travix interp -D eval-stack

    - name: Test [flash]
      continue-on-error: true # fails with "Flash execution failed too many times, build failure." but test is actually ok
      run: haxelib run travix flash

    - name: Test [hl]
      if: runner.os != 'Linux'
      run: haxelib run travix hl

    - name: Test [java]
      run: haxelib run travix java

    - name: Test [jvm]
      continue-on-error: true # no idea why it fails on CI. works locally
      run: haxelib run travix java -D jvm

    - name: Test [lua]
      continue-on-error: ${{ runner.os != 'Linux' }}
      run: haxelib run travix lua

    - name: Test [neko]
      run: haxelib run travix neko

    - name: Test [node]
      run: haxelib run travix node

    - name: Test [php]
      run: haxelib run travix php

    - name: Test [php7]
      run: haxelib run travix php7

    - name: Test [python]
      run: haxelib run travix python
